import kotlin.random.Random

//ТИПЫ
// 1. Измените программу с переменными welcome и place так, чтобы на экран выводилась
// строка =Hello World!=, а не =HelloWorld=. Значения переменных менять нельзя.

// fun main() {
//  var welcome = "Hello"
//  var place = "World"
//  println(welcome + " " + place)
// }

// 2. Напишите программу, в которой тело функции main(plustilino)) состоит всего из одной строкивыражения, 
// в котором с ввода запрашиваются две строки, соединяются в одну и выводятся на экран. Потребуются ли вам переменные?

// fun main(){
//     println(readLine()+readLine())
// }


// 3. Присвойте двум переменным числа, выведите на экран их сумму. Проверьте, допустимо
// ли в Kotlin складывать строку и число. Если да, то как это происходит?

// fun main(){
//     var a = 1
//     var b = 2
//     println(a.plus(b))
// }
//-------------------------------------------------------------------------------------------------------------------------------------


//-------------------------------------------------------------------------------------------------------------------------------------
//ПЕРЕМЕННЫЕ
// 1. Используя функцию nextDouble(plustilino)) объекта Random, напишите код, выводящий на экран
// случайное вещественное число от 0 до 1, а также случайное вещественное от -2 до 2.

// fun main() {
//     val a: Double = Random.nextDouble(1.0)
//     val b: Double = Random.nextDouble(-2.0, 2.0)
//     println("${a} ${b}")
// }


// 2. Разные типы данных занимают разный объем памяти. С помощью свойства SIZE_BYTES
// выведите на экран размер, который выделяется под каждый экземпляр целочисленных
// типов данных. Пример: println(Int.SIZE_BYTES).

// fun main(){
//     var types = arrayOf(Byte.SIZE_BYTES,Short.SIZE_BYTES,Int.SIZE_BYTES,Long.SIZE_BYTES)
//     for(i in types){println(i)}
// }

// 3. Какой результирующий тип данных получится при сложении целого и вещественного
// числа, двух целых разных типов, "сложении" числа и строки?

// fun main(){

//     val strV: String = "Hello"
//     val intV: Int = Random.nextInt(10)
//     val doubleV: Double = Random.nextDouble(10.0)
//     val longV: Long = Random.nextLong(10)
//     val variables = mapOf(
//         "При сложении целого и вещественного" to intV+doubleV,
//         "При сложении двух целых разных типов" to intV+longV,
//         "При сложении строки с числом" to strV+intV
//     )
//     fun TypeOfVariables(KeysV: String,ValueType: String){
//         println("${KeysV} результирующим типом данных является ${ValueType} при значении ${variables[KeysV]}")
//     }
//     for(i in variables.keys){
//         when(variables[i]) {
//             is String -> TypeOfVariables(i, "String")
//             is Int -> TypeOfVariables(i, "Int")
//             is Double -> TypeOfVariables(i, "Double")
//             is Long -> TypeOfVariables(i, "Long")
//             else -> println("Для пременной равной " + variables[i] + " тип не определён")
//         }
//     }
// }
//-------------------------------------------------------------------------------------------------------------------------------------


//-------------------------------------------------------------------------------------------------------------------------------------
//УСЛОВНЫЕ ОПЕРАТОРЫ
// Напишите программу, которая генерирует случайное число от -5 до 5 включительно. Если это
// число оказывается отрицательным, то на экран выводится -1; если положительным – выводится
// 1, если равно нулю – выводится 0. В программе используйте оператор if-else.

// fun main(){
//     val a: Int = Random.nextInt(-5,5)
//     println(a)
//     if(a>0){println("1")}else if(a<0){println("-1")}else{println("0")}
// }

// Напишите программу, которая генерирует случайное число от 32 до 122 включительно. Потом
// преобразовывает число в символ, а дальше проверяет что это – цифра, буква или все остальное.
// Выводит соответствующее сообщение. В программе следует использовать такие функцииметоды 
// как toChar(plustilino)), isDigit(plustilino)) и isLetter(plustilino)).

// fun main(){
//     val num = Random.nextInt(32,122).toChar()
//     when{
//         num.isDigit() -> println("Это цифра = " + num)
//         num.isLetter() -> println("Это текст = " + num)
//         else -> println("Это символ = " + num)
//     }
// }
//-------------------------------------------------------------------------------------------------------------------------------------


//-------------------------------------------------------------------------------------------------------------------------------------
//NULL
// Напишите программу, которая запрашивает с ввода два числа, знак операции (plustilino)+, -, * или /) и
// выполняет над числами указанную операцию. Для приведения строкового типа к числовому
// воспользуйтесь строковыми функциями toInt(plustilino)) или toDouble(plustilino)) и подобными.

// fun main(){
//     while (true){
//         println("Введите первое число или stop")
//         val a = readLine()!!
//         if (a=="stop"){break}
//         println("Введите второе число")
//         val b = readLine()!!
//         println("Введите знак операции (+,-,*,/)")
//         val sign = readLine()!!
//         when(sign){
//             "+"->println(a.toDouble()+b.toDouble())
//             "-"->println(a.toDouble()-b.toDouble())
//             "*"->println(a.toDouble()*b.toDouble())
//             "/"->println(a.toDouble()/b.toDouble())
//             else -> println("Некоректно введён знак операции")
//         }
//     }
// }
//-------------------------------------------------------------------------------------------------------------------------------------


//-------------------------------------------------------------------------------------------------------------------------------------
//МАССИВЫ
// 1. Заполните массив строками, которые пользователь вводит с клавиатуры и затем выведите
// их на экран в обратном порядке.

// fun main(){
    // var i = 0
    // var mas = emptyArray<String>()
    // while (i<=5){
    //     mas+=readLine()!!
    //     i++
    // }
    // mas.reverse()
    // println(mas.joinToString(" "))
// }

// 2. Заполните массив случайными целыми числами. Найдите элементы с максимальным и
// минимальным значением, используя функции-методы массива min(plustilino)) и max(plustilino)).

// fun main(){
//     var i = 0
//     var mas = emptyArray<Int>()
//     while (i<=5){
//         mas+=Random.nextInt(10)
//         i++
//     }
//     println(mas.joinToString(" "))
//     println("Максимальное - ${mas.maxOrNull() ?: 0} Минимальное -  ${mas.minOrNull() ?: 0}")
// }
//-------------------------------------------------------------------------------------------------------------------------------------


//-------------------------------------------------------------------------------------------------------------------------------------
//ЦИКЛ FOR
// 1. Заполните массив с помощью цикла for случайными числами в диапазоне от -10 до 10.
// Выведите элементы на экран. С помощью другого цикла for замените отрицательные
// значения массива на 0. Снова выведите элементы на экран.

// fun main(){
//     var mas = emptyArray<Int>()
//     for(i in 1..10){mas+=Random.nextInt(-10,10)}
//     for(i in mas){print(" " + i)}
//     for(i in 1..mas.size){if(mas[i-1]<0){mas[i-1]=0}}
//     print("\n")
//     for(i in mas){print(" " + i)}
// }

// 2. Создайте массив строк. Выведите на экран только те строки, которые содержат
// определенный символ.

// fun main(){
//     var mas = arrayOf("hello","hi","egg","integer","moscow")
//     println("Введите символ")
//     val a: String = readLine()!!
//     for(i in mas){
//         if(i.contains(a)){
//             println(i)
//         }
//     }
// }
//-------------------------------------------------------------------------------------------------------------------------------------


//-------------------------------------------------------------------------------------------------------------------------------------
//СТОКОВЫЕ ШАБЛОНЫ
// 1. Выведите на экран знак доллара – $.

// fun main(){
//     print("$")
// }

// 2. Пользователь вводит с клавиатуры строку. Используя строковый шаблон, выведите на
// экран саму строку и ее длину.

// fun main(){
//     val a = readLine()!!
//     print("${a} ${a.count()}")
// }
//-------------------------------------------------------------------------------------------------------------------------------------


//-------------------------------------------------------------------------------------------------------------------------------------
//СПИСКИ
// 1. Заполните список числами. Выведите на экран. Примените к списку функцию-метод
// shuffle(plustilino)). Снова выведите список на экран. Что делает метод shuffle(plustilino))?

// fun main(){
//     val b = mutableListOf(1.2, 4.5, 3.2, 1.8, 3.2, "gsfa", "fqscw")
//     b.shuffle()
//     println(b.joinToString(" "))
// }

// 2. Заполните список случайными числами, отсортируйте его с помощью метода sort(plustilino)),
// удалите из списка минимальное и максимальное значения.

// fun main(){
//     val b = mutableListOf<Int>()
//     for(i in 1..10){
//         b.add(Random.nextInt(-10,10))
//     }
//     b.sort()
//     println(b.joinToString(" "))
// }
//-------------------------------------------------------------------------------------------------------------------------------------


//-------------------------------------------------------------------------------------------------------------------------------------
//СЛОВАРИ
// Пользователь вводит строки. Каждая строка состоит из двух слов, разделенных пробелом.
// Программа должна добавлять эти пары в словарь. Первое слово пары – это ключ, второе –
// значение. Для разделения слов одной строки используйте функцию-метод split(plustilino)), в качестве
// аргумента передайте ей строку, содержащую один пробел – " ". 

// fun main(){
//     var slovar: Map<String,String> = mutableMapOf()
//     while(true){
//         println("Введите строку словоря в формате [ключ] пробел [значение]")
//         var a = readLine()!!
//         if (a=="stop"){
//             break
//         }else if(a=="view"){
//             for((i,j) in slovar){
//                 println ("${i} ${j}")
//             }
//         }else{
//             val b = a.split(" ")
//             slovar += b[0] to b[1]
//         }
//     }
// }
//-------------------------------------------------------------------------------------------------------------------------------------


//-------------------------------------------------------------------------------------------------------------------------------------
//ФУНКЦИИ
// Напишите функцию, которой в качестве аргумента передается массив, и из которой
// возвращается словарь, в котором индексы массива становятся ключами, а элементы массива –значениями.

// fun main(){
//     fun ArrToMap(arr: Array<Int>): Map<Int, Int>{
//         var slovar: Map<Int,Int> = mutableMapOf()
//         for(i in 1..arr.size){
//             slovar += i-1 to arr[i-1]
//         }
//         return (slovar)
//     }
//     var mas = emptyArray<Int>()
//     var i = 0
//     while (i<=5){
//         mas+=Random.nextInt(10)
//         i++
//     }
//     for(p in ArrToMap(mas)){
//         println(p)
//     }
// }
//-------------------------------------------------------------------------------------------------------------------------------------


//-------------------------------------------------------------------------------------------------------------------------------------
//ИСКЛЮЧЕНИЯ
// Доработайте программу из данного урока так, чтобы она не завершалась до тех пор, пока
// пользователь не введет два числа, и второе из них не будет нулем.

fun main() {
    while(true){
        val a = readLine()!!
        val b = readLine()!!
        val c: Int
        try {
            c = a.toInt() / b.toInt()
            println(c)
            break
        }catch (e: NumberFormatException) {
            println("Надо вводить только числа")
        }catch (e: ArithmeticException) {
            println("Делить на ноль нельзя")
        }catch (e: Exception) {
            println(e.toString())
        }
    }
}
